#!/usr/bin/env node

/**
 * Script para testar o build local antes do deploy na Vercel
 * Simula as condi√ß√µes do ambiente de produ√ß√£o
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ Iniciando teste de build para produ√ß√£o...');

try {
  // 1. Verificar se as vari√°veis de ambiente est√£o configuradas
  console.log('üîç Verificando vari√°veis de ambiente...');
  
  const envFile = path.join(__dirname, '.env');
  const envLocalFile = path.join(__dirname, '.env.local');
  
  if (!fs.existsSync(envFile) && !fs.existsSync(envLocalFile)) {
    console.warn('‚ö†Ô∏è Nenhum arquivo .env encontrado. Criando .env de exemplo...');
    
    const envExample = `# Configura√ß√µes do banco de dados
DATABASE_URL="postgresql://usuario:senha@host:5432/database"

# Configura√ß√µes do Supabase
NEXT_PUBLIC_SUPABASE_URL="https://seu-projeto.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="sua-chave-anonima"
SUPABASE_SERVICE_ROLE_KEY="sua-chave-service-role"

# Configura√ß√µes do site
NEXT_PUBLIC_SITE_URL="https://seu-dominio.com"

# Configura√ß√µes de email (opcional)
SMTP_HOST="smtp.gmail.com"
SMTP_PORT="587"
SMTP_USER="seu-email@gmail.com"
SMTP_PASS="sua-senha-app"

# Configura√ß√µes de autentica√ß√£o
NEXTAUTH_SECRET="sua-chave-secreta-super-segura"
NEXTAUTH_URL="https://seu-dominio.com"

# Configura√ß√µes de manuten√ß√£o
MAINTENANCE_MODE="false"
MAINTENANCE_SECRET="chave-secreta-manutencao"
`;
    
    fs.writeFileSync('.env.example', envExample);
    console.log('üìÑ Arquivo .env.example criado. Configure suas vari√°veis antes do deploy.');
  }

  // 2. Limpar cache anterior
  console.log('üßπ Limpando cache de build...');
  if (fs.existsSync('.next')) {
    execSync('rmdir /s /q .next', { stdio: 'inherit' });
  }

  // 3. Instalar depend√™ncias
  console.log('üì¶ Instalando depend√™ncias...');
  execSync('npm ci --prefer-offline --no-audit', { stdio: 'inherit' });

  // 4. Executar build de produ√ß√£o
  console.log('üèóÔ∏è Executando build de produ√ß√£o...');
  execSync('node build-vercel-final.js', { stdio: 'inherit' });

  // 5. Testar se o servidor inicia
  console.log('üöÄ Testando inicializa√ß√£o do servidor...');
  
  // Teste b√°sico de start (timeout de 10 segundos)
  const testStart = new Promise((resolve, reject) => {
    const child = require('child_process').spawn('npm', ['start'], {
      stdio: 'pipe',
      shell: true
    });

    let output = '';
    
    child.stdout.on('data', (data) => {
      output += data.toString();
      if (output.includes('ready') || output.includes('started') || output.includes('3000')) {
        child.kill();
        resolve(true);
      }
    });

    child.stderr.on('data', (data) => {
      const error = data.toString();
      if (error.includes('Error') && !error.includes('warning')) {
        child.kill();
        reject(new Error(error));
      }
    });

    // Timeout ap√≥s 15 segundos
    setTimeout(() => {
      child.kill();
      resolve(true); // Assume que funcionou se n√£o houve erro cr√≠tico
    }, 15000);
  });

  await testStart;
  console.log('‚úÖ Servidor iniciou com sucesso!');

  // 6. Verificar estrutura de build
  console.log('üìÅ Verificando estrutura de build...');
  const buildPath = path.join(__dirname, '.next');
  const serverPath = path.join(buildPath, 'server');
  const staticPath = path.join(buildPath, 'static');

  if (!fs.existsSync(buildPath)) {
    throw new Error('Diret√≥rio .next n√£o foi criado');
  }

  if (!fs.existsSync(serverPath)) {
    throw new Error('Diret√≥rio .next/server n√£o foi criado');
  }

  console.log('‚úÖ Estrutura de build est√° correta');

  // 7. Verificar tamanho do build
  const getDirectorySize = (dir) => {
    let size = 0;
    try {
      const files = fs.readdirSync(dir);
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stats = fs.statSync(filePath);
        if (stats.isDirectory()) {
          size += getDirectorySize(filePath);
        } else {
          size += stats.size;
        }
      }
    } catch (e) {
      // Ignore errors
    }
    return size;
  };

  const buildSize = getDirectorySize(buildPath);
  const buildSizeMB = (buildSize / 1024 / 1024).toFixed(2);
  
  console.log(`üìä Tamanho do build: ${buildSizeMB} MB`);
  
  if (buildSize > 500 * 1024 * 1024) { // 500MB
    console.warn('‚ö†Ô∏è Build muito grande, considere otimizar');
  }

  console.log('üéâ Teste de build conclu√≠do com sucesso!');
  console.log('');
  console.log('‚úÖ Seu projeto est√° pronto para deploy na Vercel!');
  console.log('');
  console.log('Para fazer o deploy:');
  console.log('1. npm install -g vercel');
  console.log('2. vercel --prod');
  console.log('');
  console.log('Ou conecte seu reposit√≥rio diretamente no dashboard da Vercel.');

} catch (error) {
  console.error('‚ùå Erro no teste de build:', error.message);
  console.error('');
  console.error('Poss√≠veis solu√ß√µes:');
  console.error('- Verifique se todas as vari√°veis de ambiente est√£o configuradas');
  console.error('- Execute: npm run clean && npm install');
  console.error('- Verifique se o banco de dados est√° acess√≠vel (se necess√°rio)');
  process.exit(1);
}
