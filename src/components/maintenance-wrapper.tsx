import { ReactNode } from 'react';
import { redirect } from 'next/navigation';
import { createSupabaseServerClient } from '@/lib/supabase';

interface MaintenanceWrapperProps {
  children: ReactNode;
  allowDuringMaintenance?: boolean;
}

async function checkMaintenanceAndAuth(): Promise<boolean> {
  console.log('üîç MaintenanceWrapper verificando modo de manuten√ß√£o...');

  try {
    const supabase = await createSupabaseServerClient();
    
    const { data: siteConfig, error } = await supabase
      .from('site_config')
      .select('maintenanceMode')
      .single();

    if (error) {
      console.log('‚ö†Ô∏è Erro ao verificar modo manuten√ß√£o:', error.message);
      return false; // Em caso de erro, permitir acesso
    }

    const isMaintenanceMode = siteConfig?.maintenanceMode || false;
    console.log('üîß Modo de manuten√ß√£o no BD:', isMaintenanceMode);

    if (!isMaintenanceMode) {
      return false; // N√£o est√° em manuten√ß√£o
    }

    console.log('üöß Site em modo de manuten√ß√£o - verificando se √© admin');
    
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.log('üöß Usu√°rio n√£o logado - redirecionamento necess√°rio');
      return true; // Precisa redirecionar
    }

    // Verificar se √© admin
    const { data: userData } = await supabase
      .from('users')
      .select('id, isActive, role')
      .eq('email', user.email)
      .single();

    const isAdmin = userData && userData.isActive && userData.role === 'ADMIN';
    
    if (!isAdmin) {
      console.log('üöß Usu√°rio n√£o-admin - redirecionamento necess√°rio');
      return true; // Precisa redirecionar
    } else {
      console.log('‚úÖ Admin detectado - permitindo acesso durante manuten√ß√£o');
      return false; // Admin pode acessar
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na verifica√ß√£o de manuten√ß√£o:', error);
    return false; // Em caso de erro, permitir acesso
  }
}

export async function MaintenanceWrapper({ 
  children, 
  allowDuringMaintenance = false 
}: MaintenanceWrapperProps) {
  // Se esta rota √© permitida durante manuten√ß√£o, n√£o verificar
  if (allowDuringMaintenance) {
    return <>{children}</>;
  }

  // Verificar se precisa redirecionar
  const shouldRedirect = await checkMaintenanceAndAuth();
  
  if (shouldRedirect) {
    console.log('üöß Executando redirecionamento para /maintenance');
    redirect('/maintenance');
  }

  return <>{children}</>;
}
